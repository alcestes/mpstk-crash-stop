%%% Representation of multiparty session type contexts as mCRL2 processes
%%%
%%% Copyright 2022 Technical University of Denmark
%%%                Alceste Scalas <alcsc @ dtu.dk>
%%%                Adam Barwell <a.barwell @ imperial.ac.uk>
%%% Copyright 2018 Alceste Scalas <alceste.scalas @ imperial.ac.uk>
%%% Released under the MIT License: https://opensource.org/licenses/MIT

%%% Sessions
sort Session;
cons s: Nat -> Session;

var x, y: Nat;
eqn s(x) == s(y) = x == y;

%%% Roles
sort Role;
cons r: Nat -> Role;

var x, y: Nat;
eqn r(x) == r(y) = x == y;

%%% Message labels
sort Message;
cons m: Nat -> Message;

var x, y: Nat;
eqn m(x) == m(y) = x == y;

%%% Payload types
sort Payload;
cons p: Nat -> Payload;

var x, y: Nat;
eqn p(x) == p(y) = x == y;

% Commonly-used payload types
map pEnd, pBool, pInt, pString, pUnit: Payload;
eqn pEnd    = p(0);
    pBool   = p(1);
    pInt    = p(2);
    pString = p(3);
    pUnit   = p(4);

%%% Different kinds of action arguments denotig either a communication (c) or a
%%% crash event (e).  They are used below to define the equalities needed to
%%% yield the necessary synchronisations (e.g. between a crashed context entry
%%% and a crash detection branch)
sort T;
cons c : Session # Role # Role # Message # Payload -> T;
     e : Session # Role -> T;

var s1, s2 : Session;
    r1, r2, r3, r4 : Role;
    m1, m2 : Message;
    p1, p2 : Payload;
eqn c(s1, r1, r2, m1, p1) == c(s2, r3, r4, m2, p2) = s1 == s2 && r1 == r3 && r2 == r4 && m1 == m2 && p1 == p2;
    e(s1, r1) == e(s2,r2) = s1 == s2 && r1 == r2;
    c(s1, r1, r2, m1, p1) == e(s2, r3) = s1 == s2 && r2 == r3;
    e(s2, r3) == c(s1, r1, r2, m1, p1) = s1 == s2 && r2 == r3;

%%% Actions
act o: T; % Output from 1st to 2nd role
    i: T; % Input from 1st role by 2nd
    t: T; % Communication: 1st to 2nd role
    crash: T; % Crash event
    crashed: T; % Signaling of a crashed entry
    crashDetect: T; % Detection of a crash
    crasht: T; % Crash synchronisation between 'crashed' and 'crashDetect'

%%% Crashed context entry, that keeps signaling that it has crashed
proc crashP(ss: Session, rr: Role) = crash(e(ss, rr)) . crashedP(ss, rr);
proc crashedP(ss: Session, rr: Role) = crashed(e(ss, rr)) . crashedP(ss, rr);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Beginning of autogenerated specification %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
